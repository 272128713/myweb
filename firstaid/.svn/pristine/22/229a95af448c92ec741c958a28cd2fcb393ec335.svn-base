<?php
/*
 * 1.2.18. send_sosmsg.php（发送急救信息）
 */
header ( "content-type:text/html; charset=utf-8" );
include (dirname ( __FILE__ ) . "/common/RKMongo.php");
include (dirname ( __FILE__ ) . "/common/inc.php");
include (dirname ( __FILE__ ) . "/common/MecManager.php");
include (dirname ( __FILE__ ) . "/common/MMS_FileManager.php");
include(dirname(__FILE__) . "/service/send_sosmsg.php");
$logger = Logger::getLogger ( basename ( __FILE__ ) );
// 输入参数校验
$params = array (array ("ss",true),array ("id",true),array("flag",false));
$params = Filter::paramCheckAndRetRes ( $_POST, $params );
if (! $params) {
	$logger->error ( sprintf ( "params error. params is %s", v ( $_POST ) ) );
	ErrCode::echoErr ( ErrCode::API_ERR_MISSED_PARAMATER, 1 );
}
// 接收参数
$session = $params ["ss"];
if ($params ["flag"]) {
	$flag = $params ["flag"]; // 求救消息类型（0 向附近的人发1 向救命稻草发 2向紧急联系人发）
} else {
	$flag = 0;
}
// session校验
$databaseManager = new DatabaseManager ();
$database = $databaseManager->getConn ();
if (! $database) {
	$logger->error ( "database connect error." );
	ErrCode::echoErr ( ErrCode::SYSTEM_ERR );
}
$sessionArr = $databaseManager->checkSession ( $session );
if ($sessionArr) {
	//$userID = ( int ) $sessionArr ['user_id'];
	$user_id = $sessionArr ["user_id"];
	$mobile = $sessionArr ["mobile"];
	$myFriendList = "";
} else {
	$databaseManager->destoryConn ();
	$logger->error ( sprintf ( "Session check is fail. Error session is [%s]", $session ) );
	Errcode::echoErr ( ErrCode::API_ERR_INVALID_SESSION, 1 );
}

// 发给用户10人
$mongoDB = new RKMongo ();
$mongo = $mongoDB->connect ();
if (! $mongo) {
	$logger->error ( "mongoDB connect error." );
	ErrCode::echoErr ( ErrCode::SYSTEM_ERR, 1 );
}

// 根据userid获取其GPS位置信息
$myGPS = $mongoDB->getMyLbs ( 1, $user_id );
$longitude = $myGPS [0]; // 精度
$latitude = $myGPS [1]; // 纬度
if (! $myGPS) {
	ErrCode::echoOkArr ( "do not get my gpsInfo.", "result=[]" );
}
//根据$flag判断是给谁发送急救消息
if ($flag == 0) {//0 向附近的人发

		$mongoResult = $mongoDB->getLbs ( 1, $userID, $myGPS, array ($userID));
		$mongoDB->close ();
		$uid = "";
		if (! $mongoResult) {
			ErrCode::echoOkArr ( "do not matchFriendGpsInfo.", "result=[]" );
		} else {
			// 进行数据抽取
			$mongoFriendList = array ();
			$tmpFriendList = ""; // 拼接mysql查询字符串(123,456,789....)
			$numberCount = 0;
			foreach ( $mongoResult ['results'] as $line ) {
				$tmpFriend ['uid'] = $line ['obj'] ['_id']; // 取出附近好友id
				$tmpFriend ['dis'] = round ( $line ['dis'] ); // 取出好友的dis
				array_push ( $mongoFriendList, $tmpFriend ); // 然后把这两条数据压进数组$mongoFriendList中
			}
			
			$cou = count ( $mongoFriendList ); // 统计数组中数据个数
			if ($cou < 1) { // 表示附近没有人
				$logger->error ( "no man error." );
				ErrCode::echoErr ( ErrCode::API_ERR_NO_PEOPLE, 1 );
			}
			//if ($cou <= 20 && $cou > 0) {
				foreach ( $mongoFriendList as $mongoLine ) {
					
					$uid .= $mongoLine ['uid'] . ",";
				}
			//}
		}
	$uid = substr ( $uid, 0, - 1 );
	$tempParams = array_values ( array_unique ( explode ( ",", $uid ) ) ); // array_unique()作用是移除数组中重复的值
    // array_values() 函数返回一个包含给定数组中所有键值的数组，但不保留键名。
	// explode — 使用一个字符串分割另一个字符串
	$uidCount = count ( $tempParams );
	if ($uidCount == 0) {
		$logger->error ( sprintf ( "params error. error. member is %s", $uid ) );
		ErrCode::echoErr ( ErrCode::API_ERR_MISSED_PARAMATER, 1 );
	}
	//$uid = implode ( ",", $tempParams ); // 把数组按照 , 分割拆分成字符串
	if($uidCount>20){
		//array_slice($input, 0, 3);   // 该函数作用是把$input这个数组中取出第一，第二，第三个元素
		$a = $uidCount % 20;
		for($i=0;$i<$a;$i++){
			$tempParams =  array_slice($tempParams,$i*20,20);
			$uid = implode ( ",", $tempParams ); // 把数组按照 , 分割拆分成字符串
			send_smss($uid,$user_id,$mobile);
		}
	
	}else{
		$uid = implode ( ",", $tempParams ); // 把数组按照 , 分割拆分成字符串
		send_smss($uid,$user_id,$mobile);
	} 
	

	
}else if($flag==1){ //1 向救命稻草发 
	//查询救命稻草的id
	$uid =  send_sosmsg($user_id,$mobile);
	foreach ($uid as $key=>$value){ //把救命稻草的id拼接成字符串
		$users_ids .= $value['user_id'].",";
	}
	$uid = substr ( $users_ids, 0, - 1 );
	$tempParams = array_values(array_unique(explode ( ",", $uid )));
	$uidCount = count ( $tempParams );
	if ($uidCount == 0) {
		$logger->error ( sprintf ( "params error. error. member is %s", $uid ) );
		ErrCode::echoErr ( ErrCode::API_ERR_MISSED_PARAMATER, 1 );
	}
	//$uid = implode ( ",", $tempParams ); // 把数组按照 , 分割拆分成字符串
	if($uidCount>20){
		//array_slice($input, 0, 3);   // 该函数作用是把$input这个数组中取出第一，第二，第三个元素
		$a = $uidCount % 20;
		for($i=0;$i<$a;$i++){
			$tempParams =  array_slice($tempParams,$i*20,20);
			$uid = implode ( ",", $tempParams ); // 把数组按照 , 分割拆分成字符串
			send_smss($uid,$user_id,$mobile);
		}
	
	}else{
		$uid = implode ( ",", $tempParams ); // 把数组按照 , 分割拆分成字符串
		send_smss($uid,$user_id,$mobile);
	} 
	
}else if($flag == 2){//2向紧急联系人发
	
	//查询紧急联系人的id
	$uid =  send_sosmsg_linkman($user_id,$mobile);
	
	foreach ($uid as $key=>$value){ //把救命稻草的id拼接成字符串
		
		$users_idss .= $value['user_id'].",";
	}
	$uid = substr ( $users_idss, 0, - 1 );
	$tempParams = array_values(array_unique(explode ( ",", $uid )));
	$uidCount = count ( $tempParams );
	if ($uidCount == 0) {
		$logger->error ( sprintf ( "params error. error. member is %s", $uid ) );
		ErrCode::echoErr ( ErrCode::API_ERR_MISSED_PARAMATER, 1 );
	}

    if($uidCount>20){
     	//array_slice($input, 0, 3);   // 该函数作用是把$input这个数组中取出第一，第二，第三个元素
	$a = $uidCount % 20;
	for($i=0;$i<$a;$i++){
		$tempParams =  array_slice($tempParams,$i*20,20);
		$uid = implode ( ",", $tempParams ); // 把数组按照 , 分割拆分成字符串
		send_smss($uid,$user_id,$mobile);
	     }

     }else{
     	$uid = implode ( ",", $tempParams ); // 把数组按照 , 分割拆分成字符串
     	send_smss($uid,$user_id,$mobile);
     } 
//$uid = implode ( ",", $tempParams ); // 把数组按照 , 分割拆分成字符串
}

function send_smss($uid,$user_id,$mobile){
	
	$logger = Logger::getLogger ( basename ( __FILE__ ) );
	$databaseManager = new DatabaseManager ();
	$database = $databaseManager->getConn ();
	
	

 	$mime = "sos/nearby";
 	$gps_json = json_encode ( array ("longitude" => $longitude,"latitude" => $latitude) );
 	$textContent = "SOS附近的好心人：我是" . $sessionArr ['rn'] . "，我身体突感不适，处于危险之中，急需您的帮助！请收到本求救信息的人迅速与我联系，我的手机号是" . $sessionArr ['mobile'] . "，万分感谢您！" . "\n" . $gps_json;
 	$msgObj = array (
 			"id" => $params ["id"],
 			"type" => "MMS",
 			"mime" => $mime,
 			"srcm" => $mobile,
 			"src" => $user_id,
 			"text" => rawurlencode ( $textContent ),
 			"time" => time ()
 	);

 	$logger->info ( "MMS-TYPE:TEXT,MMS-LENGTH:" . strlen ( trim ( $_POST ["text"] ) ) . ",MMS-SENDER:" . $mobile . ",MMS-CONTENT:" . rawurlencode ( $_POST ["text"] ) . ",MMS-ID:" . $params ["id"] );
 	$notifyMember = str_replace ( $user_id.",", "", $uid ); // 过滤发送者自己
 
 	// $notifyMember = str_replace($user_id,"",str_replace($user_id.",", "", $uid)); //过滤发送者自己
 	// 给接收者发送notify
 	$accepters = $databaseManager->getUserInfoByUid ( $notifyMember );
 	$databaseManager->destoryConn (); // unlink Master DB
 	if (! $accepters) {
 		$logger->error ( sprintf ( "accepter not exists ,uid %s", $notifyMember ) );
 		ErrCode::echoErr ( ErrCode::API_ERR_MESSAGE_SEND_ERROR, 1 );
 	}
 	// 实现发送消息
 	$mecManagerSos = new MecManager ( $user_id, $msgObj, $accepters );
 	$mecManagerSos->sendMessage ();
 	ErrCode::echoOk ( "OK", 1 );
 	
}



?>